// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// --------------------------------------
// ENUMS
// --------------------------------------

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EMPLOYEE
  HR
  MANAGER
  ACCOUNTS
}
enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LeaveType {
  SICK
  CASUAL
  ANNUAL
  MATERNITY
  UNPAID
  OTHER
}

enum TaskStatus {
  TODO
  WAITING
  IN_PROGRESS
  COMPLETED
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  DISBURSED
  COMPLETED
}

enum EMIStatus {
  PENDING
  PAID
  OVERDUE
}

enum MovementLogStatus {
  ACTIVE
  COMPLETED
  DELAYED
}

// --------------------------------------
// EMBEDDED TYPES
// --------------------------------------

type EmergencyContact {
  name  String
  phone String
  address String
  relation String
}

type BankDetails {
  bankName String
  accountNumber String
  accountName String
  branch String
  routingNumber String
}

type Education {
  highestDegree String
  university String
  graduationYear Int

}


// --------------------------------------
// MODELS Users
// --------------------------------------

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  passwordHash String
  profileImage String?
  emergencyContact EmergencyContact?
  skills   String[]
  bankDetails BankDetails?
  education Education?
  phone     String?
  address   String?
  role      UserRole
  department String?
  reportingBoss String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  leaveRequests LeaveRequest[] @relation("EmployeeLeaveRequests") 
  approvals     LeaveRequest[] @relation("ManagerApprovedLeaves")
  task          TaskManagement[] @relation("TaskCreation")
  taskView      TaskManagement[] @relation("TaskViewManager")
  loanRequest   LoanManagement[] @relation("LoanCreation")
  loanApproval  LoanManagement[] @relation("LoanApproval")
  movementLogCreator MovementLog[] @relation("movementLogCreator")
  movementLogViewer  MovementLog[] @relation("movementLogViewer")
}



// --------------------------------------
// Leave Request Model
// --------------------------------------
 model LeaveRequest{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  employee  User     @relation("EmployeeLeaveRequests", fields: [userId], references: [id]) 
  manager   User?    @relation("ManagerApprovedLeaves", fields: [managerId], references: [id])
  managerId String?  @db.ObjectId
  leaveType String
  startDate DateTime
  endDate   DateTime?
  reason    String
  supportingDocument String?
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 }


// --------------------------------------
// Task Management Model
// --------------------------------------
model TaskManagement{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  managerId String   @db.ObjectId
  title     String
  description String
  status    String   @default("TODO") // TODO, PENDING, IN_PROGRESS, COMPLETED
  priority  String   @default("LOW")  // LOW, MEDIUM, HIGH
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  // Relation
  employee  User     @relation("TaskCreation", fields: [userId], references: [id])
  manager   User     @relation("TaskViewManager", fields: [managerId], references: [id])

}

// --------------------------------------
// Loan Management Model
// --------------------------------------
model LoanManagement{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  managerId String   @db.ObjectId
  loanTenure Int
  loanAmount Float 
  emiAmount  Float 
  reason    String
  disbursementDate  DateTime?
  emiStartDate DateTime?
  emiEndDate   DateTime?
  status    LoanStatus @default(PENDING)
  totalPaid         Float  @default(0.00)
  remainingBalance  Float  @default(0.00)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation
  emis       LoanEmi[] @relation("LoanEmi")
  employee   User      @relation("LoanCreation", fields: [userId], references: [id])
  manager    User      @relation("LoanApproval", fields: [managerId], references: [id])

}  


model LoanEmi{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  loanId    String   @db.ObjectId
  dueDate   DateTime
  amount    Float
  paidDate  DateTime?
  status    EMIStatus @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  loan      LoanManagement  @relation("LoanEmi", fields: [loanId], references: [id])

}

// --------------------------------------
// Movement Log Model
// --------------------------------------

model MovementLog{
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  managerId String    @db.ObjectId
  type      String
  location  String
  time      String
  purpose   String
  status    MovementLogStatus @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  employee  User     @relation("movementLogCreator", fields: [userId], references: [id])
  manager   User     @relation("movementLogViewer", fields: [managerId], references: [id])

}


